name: filingServicePipeline

on:
  push:
    branches:
      - 'main'
      - 'feature**'
    paths:
      - services/filing/**
      - .github/workflows/filingService.yaml
env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: services/filing/template.yaml
  DEV_STACK_NAME: pcf-demo-serverless-dev-filing-service
  DEV_PIPELINE_EXECUTION_ROLE: arn:aws:iam::812042964529:role/goa-iam-role-cicd-pcff-dev-pipeline-role
  DEV_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::812042964529:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-F4DVVPL3YBXN
  DEV_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket- 
  DEV_REGION: ca-central-1
  UAT_STACK_NAME: pcf-demo-serverless-uat-filing-service
  UAT_PIPELINE_EXECUTION_ROLE: arn:aws:iam::812042964529:role/aws-sam-cli-managed-uat-pipe-PipelineExecutionRole-KXTTTYXQMIF
  UAT_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::812042964529:role/aws-sam-cli-managed-uat-p-CloudFormationExecutionR-1EWZLOSJ99LR4
  UAT_ARTIFACTS_BUCKET: aws-sam-cli-managed-uat-pipeline-artifactsbucket-ui767vydxwdi
  UAT_REGION: ca-central-1
  PROD_STACK_NAME: filing
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::812042964529:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-2YN6F6WSDFPJ
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::812042964529:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-PG8D6TH1Y61K
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-1gzcns30go8le
  PROD_REGION: ca-central-1 

jobs: 
  test:
    # deploy when if code is pushed to main OR
    # when code is pushed to any of the feature branch with tag deploy
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          # trigger the tests here

  delete-feature:
    # delate/ undeploy when code is pushed to a feature branch with tag undeploy
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/undeploy')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${DEV_REGION} \
            --no-prompts

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    if: startsWith(github.ref, 'refs/heads/feature') && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/deploy')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the dev account
        shell: bash
        run: |
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${DEV_CLOUDFORMATION_EXECUTION_ROLE}

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to dev artifact buckets
        run: |
          sam package \
            --template ${SAM_TEMPLATE} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --region ${DEV_REGION} \
            --output-template-file packaged-dev.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-dev.yaml
          path: packaged-dev.yaml

      # - name: Assume the testing pipeline user role
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.UAT_REGION }}
      #     role-to-assume: ${{ env.UAT_PIPELINE_EXECUTION_ROLE }}
      #     role-session-name: uat-packaging
      #     role-duration-seconds: 3600
      #     role-skip-session-tagging: true

      # - name: Upload artifacts to uat artifact buckets
      #   run: |
      #     sam package \
      #       --s3-bucket ${UAT_ARTIFACTS_BUCKET} \
      #       --region ${UAT_REGION} \
      #       --output-template-file packaged-uat.yaml

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: packaged-uat.yaml
      #     path: packaged-uat.yaml

      # - name: Assume the prod pipeline user role
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.PROD_REGION }}
      #     role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
      #     role-session-name: prod-packaging
      #     role-duration-seconds: 3600
      #     role-skip-session-tagging: true

      # - name: Upload artifacts to production artifact buckets
      #   run: |
      #     sam package \
      #       --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
      #       --region ${PROD_REGION} \
      #       --output-template-file packaged-prod.yaml

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: packaged-prod.yaml
      #     path: packaged-prod.yaml

  deploy-dev:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-dev.yaml

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to dev account
        run: |
          sam deploy --stack-name ${DEV_STACK_NAME} \
            --template packaged-dev.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${DEV_CLOUDFORMATION_EXECUTION_ROLE}

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          # trigger the integration tests here

  deploy-testing:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-testing.yaml

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
